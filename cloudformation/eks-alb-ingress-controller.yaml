---
AWSTemplateFormatVersion: '2010-09-09'
Description: |-
   Creates and configures ALB Ingress Controller. See https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html

Parameters:
  KubeManifestLambdaArn:
    Type: String
    Description: Kube Manifest Lambda ARN (as created by EKS Quickstart)
    MinLength: 1

  KubeConfigPath:
    Type: String
    Description: Location for Kube Config encrypted config
    MinLength: 1

  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
    MinLength: 1

  EksClusterOidcUrl:
    Type: String
    MinLength: 1
    Description: "EKS Cluster Oidc Url (without https://.  e.g: oidc.eks.us-west-2.amazonaws.com/id/DDDDD7B6B54B047642F0576B7B84862D)"

  EksClusterName:
    Type: String
    MinLength: 1
    Description: "Eks Cluster Name"


Resources:
  ALBIngressControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Description: "Policy Document for ALBIngressController. See https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html"
    Properties:
      Description: "Policy Document for ALBIngressController. See https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/iam-policy.json"
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:GetCertificate"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcs",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteRule",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:ModifyRule",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:ModifyTargetGroupAttributes",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:RemoveListenerCertificates",
            "elasticloadbalancing:RemoveTags",
            "elasticloadbalancing:SetIpAddressType",
            "elasticloadbalancing:SetSecurityGroups",
            "elasticloadbalancing:SetSubnets",
            "elasticloadbalancing:SetWebACL"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole",
            "iam:GetServerCertificate",
            "iam:ListServerCertificates"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:DescribeUserPoolClient"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "waf-regional:GetWebACLForResource",
            "waf-regional:GetWebACL",
            "waf-regional:AssociateWebACL",
            "waf-regional:DisassociateWebACL"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources",
            "tag:TagResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "waf:GetWebACL"
          ],
          "Resource": "*"
        }
        ]
      }

  EksAlbIngressControllerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/${EksClusterOidcUrl}
            Action: sts:AssumeRoleWithWebIdentity
#            Condition:
#                This condition is not supported in EKS and needs to be manually added.
#              StringEquals:
#                "${EksClusterOidcUrl}:sub": system:serviceaccount:kube-system:alb-ingress-controller

      ManagedPolicyArns:
        - !Ref ALBIngressControllerPolicy

  ClusterRole:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Kubernetes manifest
      Manifest:
        # See https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/rbac-role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          labels:
            app.kubernetes.io/name: alb-ingress-controller
          name: alb-ingress-controller
        rules:
          - apiGroups:
              - ""
              - extensions
            resources:
              - configmaps
              - endpoints
              - events
              - ingresses
              - ingresses/status
              - services
            verbs:
              - create
              - get
              - list
              - update
              - watch
              - patch
          - apiGroups:
              - ""
              - extensions
            resources:
              - nodes
              - pods
              - secrets
              - services
              - namespaces
            verbs:
              - get
              - list
              - watch

  ClusterRoleBinding:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    DependsOn: ClusterRole
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Kubernetes manifest
      Manifest:
        # See https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/rbac-role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          labels:
            app.kubernetes.io/name: alb-ingress-controller
          name: alb-ingress-controller
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: alb-ingress-controller
        subjects:
          - kind: ServiceAccount
            name: alb-ingress-controller
            namespace: kube-system

  ServiceAccount:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    DependsOn: [EksAlbIngressControllerRole, ClusterRoleBinding]
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Kubernetes manifest
      Manifest:
        # See https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/rbac-role.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          labels:
            app.kubernetes.io/name: alb-ingress-controller
          name: alb-ingress-controller
          namespace: kube-system
          annotations:
            eks.amazonaws.com/role-arn: !GetAtt EksAlbIngressControllerRole.Arn

  AlbIngressController:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    DependsOn: ServiceAccount
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Kubernetes manifest
      Manifest:
      # See https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/alb-ingress-controller.yaml
      # Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
      # This manifest details sensible defaults for deploying an ALB Ingress Controller.
      # GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            app.kubernetes.io/name: alb-ingress-controller
          name: alb-ingress-controller
          # Namespace the ALB Ingress Controller should run in. Does not impact which
          # namespaces it's able to resolve ingress resource for. For limiting ingress
          # namespace scope, see --watch-namespace.
          namespace: kube-system
        spec:
          selector:
            matchLabels:
              app.kubernetes.io/name: alb-ingress-controller
          template:
            metadata:
              labels:
                app.kubernetes.io/name: alb-ingress-controller
            spec:
              containers:
                - name: alb-ingress-controller
                  args:
                    # Limit the namespace where this ALB Ingress Controller deployment will
                    # resolve ingress resources. If left commented, all namespaces are used.
                    # - --watch-namespace=your-k8s-namespace

                    # Setting the ingress-class flag below ensures that only ingress resources with the
                    # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
                    # choose any class you'd like for this controller to respect.
                    - --ingress-class=alb

                    # REQUIRED
                    # Name of your cluster. Used when naming resources created
                    # by the ALB Ingress Controller, providing distinction between
                    # clusters.
                    - !Sub "--cluster-name=${EksClusterName}"

                    # AWS VPC ID this ingress controller will use to create AWS resources.
                    # If unspecified, it will be discovered from ec2metadata.
                    # - --aws-vpc-id=vpc-xxxxxx

                    # AWS region this ingress controller will operate in.
                    # If unspecified, it will be discovered from ec2metadata.
                    # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region
                    # - --aws-region=us-west-1

                    # Enables logging on all outbound requests sent to the AWS API.
                    # If logging is desired, set to true.
                    # - --aws-api-debug
                    # Maximum number of times to retry the aws calls.
                    # defaults to 10.
                    # - --aws-max-retries=10
                    # env:
                    # AWS key id for authenticating with the AWS API.
                    # This is only here for examples. It's recommended you instead use
                    # a project like kube2iam for granting access.
                    #- name: AWS_ACCESS_KEY_ID
                    #  value: KEYVALUE

                    # AWS key secret for authenticating with the AWS API.
                    # This is only here for examples. It's recommended you instead use
                    # a project like kube2iam for granting access.
                    #- name: AWS_SECRET_ACCESS_KEY
                    #  value: SECRETVALUE
                  # Repository location of the ALB Ingress Controller.
                  image: docker.io/amazon/aws-alb-ingress-controller:v1.1.4
              serviceAccountName: alb-ingress-controller

